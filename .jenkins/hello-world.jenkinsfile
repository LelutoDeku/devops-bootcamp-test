
def createECRRepository(region, repository) {

  sh """
    if aws ecr describe-repositories --repository-names $repository --region $region >/dev/null 2>&1; then
        echo ""
        echo "Creating ECR repository $repository in region $region"
        echo "-----------------------------------------------------------"
        aws ecr create-repository --repository-name $repository --region $region
    fi
  """
}



def BuildTagAndPush(service) {

  def directory = "object-detection/${service}"
  def dockerfile = "${service}.dockerfile"
  def repository = "class-3-object-detection-${service}"
  
  def region = "${AWS_ECR_REGION}"

//   createECRRepository(region, repository)

  def registry = "${REGISTRY}"
  def tag = "${IMAGE_TAG}"

  def local_image_name = "${repository}:${tag}"
  def remote_image_name = "${registry}/${local_image_name}"

  echo local_image_name
  echo remote_image_name

  dir(path: directory) {

    sh """
      pwd

      echo ""
      ls -l 

      echo ""
      echo "Building Docker image $local_image_name"   
      echo "-----------------------------------------------------------"
      docker build -f $dockerfile -t $local_image_name .

      echo ""
      echo "Tagging Docker image $local_image_name as $remote_image_name"
      echo "-----------------------------------------------------------"
      docker tag $local_image_name $remote_image_name

      echo ""
      echo "Pushing Docker image $remote_image_name"
      echo "-----------------------------------------------------------"
      docker push $remote_image_name
    """
  }
}

pipeline {
  agent {
    kubernetes {
    //   yaml '''
    //   '''
        yamlFile '.jenkins/pod_templates/pod_template_extended.yaml'
    }
  }
  environment { 
    AWS_ACCOUNT  = "854171615125"
    AWS_ECR_REGION = "us-east-2"
    
    REGISTRY = "${AWS_ACCOUNT}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com"

    DOCKER_USERNAME = "AWS"
    
    SHARED_DATA_PATH = "/mnt/shared-data"
    AWS_ECR_TOKEN_FILE = "aws-ecr-token"
    EC2_INSTANCES_PUBLIC_IP_ADDRESSES = "ec2-instances-public-ip-addresses"
    EC2_INSTANCES_IDS = "ec2-instances-ids"

    GITHUB_ACCOUNT = "tsadoklf"
    GITHUB_REPO_URL = "https://github.com/${GITHUB_ACCOUNT}/devops-bootcamp-test.git"

    // IMAGE_TAG="tsadok-${BUILD_NUMBER}"
    IMAGE_TAG = "tsadok"
  }
  stages {
    // git branch: 'main', changelog: false, poll: false, url: 'https://mohdsabir-cloudside@bitbucket.org/mohdsabir-cloudside/java-app.git'
    stage('Git: Clone Code') {
      steps {
        container('maven') {

           // http://aada482ae939d430180f1feba4d11f49-899972468.us-west-2.elb.amazonaws.com/jenkins/env-vars.html/

          echo "env.JOB_NAME: ${env.JOB_NAME}"
          echo "env.BRANCH_NAME: ${env.BRANCH_NAME}" 
          echo "env.GIT_BRANCH: ${env.GIT_BRANCH}"

          sh """
            echo "env.JOB_NAME: ${env.JOB_NAME}"
            export GIT_BRANCH_SHORT=\$(echo ${env.GIT_BRANCH} | sed 's/origin\\///')

            printenv
          """

          git branch: "main", 
            changelog: false, poll: false, 
            credentialsId: 'jenkins',
            url: "${GITHUB_REPO_URL}"


          // script {
            // GIT_COMMIT_EMAIL = sh (
            //       // script: 'git --no-pager show -s --format=\'%ae\'',
            //       script: 'echo $env.GIT_BRANCH'
            //       returnStdout: true
            //   ).trim()
            //   echo "Git committer email: ${GIT_COMMIT_EMAIL}"
          // }            
      
        }
      }
    }  

    stage('AWS: Install Tools') {
      steps {
        container('aws') {
          sh '''
            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            yum update -y && yum install -y git tar openssl jq 
            
            echo "Installing kubectl ..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
                    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

            echo "Installing Helm ..."
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
                chmod 700 get_helm.sh && \
                ./get_helm.sh                                
          '''
        }
      }
    }

    stage('AWS: Get ECR Token') {
      steps {
        container('aws') {
          sh '''
            echo "Getting AWS ECR token for Docker login..."
            aws ecr get-login-password --region $AWS_ECR_REGION > $SHARED_DATA_PATH/$AWS_ECR_TOKEN_FILE
          '''
        }
      }
    }

    stage('Get AWS update-kubeconfig') {
      steps {
        container('aws') {
          sh '''
            CLUSTER_NAME="k8s-batch3"
            REGION="us-west-2"
            KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION --kubeconfig $KUBECONFIG
          '''
        }
      }
    }

  

    stage('EKS: Get Load Balancer Hostname') {
      steps {
        container('aws') {
          sh '''
            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            NAMESPACE="nginx"
            SERVICE_NAME="ingress-nginx-controller"

            echo "Getting the external-IP (hostname) ..."
            export HOST_NAME=$(kubectl get service -n $NAMESPACE $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "HOST_NAME: $HOST_NAME"

          '''
        }
      }
    }

    stage('EKS: Deploy Hello-World using kubectl tool') {
      when {      
          expression {
              return env.JOB_NAME == 'tutim-ai-hello-world';
          }
      }
      steps {
        container('aws') {
          sh '''
            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            kubectl get ns --kubeconfig $KUBECONFIG

            K8S_DIR=".k8s/hello-world"

            kubectl apply -f $K8S_DIR/0-namespace.yaml  --kubeconfig $KUBECONFIG

            NAMESPACE="app"

            kubectl apply -f $K8S_DIR/1-service.yaml    -n $NAMESPACE --kubeconfig $KUBECONFIG
            kubectl apply -f $K8S_DIR/2-deployment.yaml -n $NAMESPACE --kubeconfig $KUBECONFIG
            kubectl apply -f $K8S_DIR/3-hpa.yaml        -n $NAMESPACE --kubeconfig $KUBECONFIG
            kubectl apply -f $K8S_DIR/4-ingress.yaml    -n $NAMESPACE --kubeconfig $KUBECONFIG

            kubectl get all -n $NAMESPACE --kubeconfig $KUBECONFIG
            
          '''
        }
      }
    }

    stage('EKS: Deploy Hello-World using Helm') {
      when {      
          expression {
              return env.JOB_NAME == 'tutim-ai-hello-world';
          }
      }
      steps {
        container('aws') {
          sh '''
            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            NAMESPACE="hello-world" 

            echo ""
            echo "Using Helm to install Hello-World to namespace '$NAMESPACE'"
            echo "-----------------------------------------------------------"

            RELEASE_NAME="hello-world"
            CHART_NAME="hello-world"
            CHART_REPO="./helm/hello-world"
            VALUES_FILE="k8s-install-jenkins-helm-values.yaml"

            echo ""
            echo "Installing '$CHART_NAME' in namespace '$NAMESPACE' using helm"
            echo "-----------------------------------------------------------"
            helm upgrade $CHART_NAME $CHART_REPO \
                --install \
                --create-namespace \
                --namespace $NAMESPACE \
                --kubeconfig $KUBECONFIG \
                --set ingress.hosts[0].paths[0].path=/helm-hello-world \
                --set ingress.hosts[0].paths[0].pathType=Prefix \
                --set ingress.hosts[0].host=$HOST_NAME \
                --set deployment.replicas=3 
            
            kubectl get all -n $NAMESPACE --kubeconfig $KUBECONFIG
          '''
        }
      }
    }
  }
  post {
    always {
        container('dind') {
          sh '''
            docker logout
          '''
        }
    }
  }
} 
